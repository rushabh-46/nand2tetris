// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	Not(in=instruction[15], out=Ainstruction);   
    	And(a=instruction[15], b=instruction[5], out=ALUgoestoA);
	Mux16(a=instruction, b=ALUout, sel=ALUgoestoA, out=Aregin);
	Or(a=Ainstruction, b=ALUgoestoA, out=loadA); 
    	ARegister(in=Aregin, load=loadA, out=Aregout);	
	Mux16(a=Aregout, b=inM, sel=instruction[12], out=ALUin2);

	And(a=instruction[15], b=instruction[4], out=loadD);
    	DRegister(in=ALUout, load=loadD, out=Dout);

ALU(x=Dout,y=ALUin2,zx=instruction[11],nx=instruction[10],
	zy=instruction[9],ny=instruction[8],f=instruction[7],
	no=instruction[6],out=ALUout,zr=zr,ng=ng);
Or16(a=false, b=Aregout, out[0..14]=addressM);
Or16(a=false, b=ALUout, out=outM);
And(a=instruction[15],b=instruction[3],out=writeM);

And(a=instruction[1],b=instruction[2],out=t1);
And(a=instruction[0],b=t1,out=t2);
Not(in=zr,out=notzr);
Not(in=ng,out=notng);
And(a=instruction[0],b=notzr,out=t3);
And(a=t3,b=notng,out=t4);
And(a=instruction[2],b=ng,out=t5);
And(a=instruction[1],b=zr,out=t6);
Or(a=t2,b=t4,out=t7);
Or(a=t5,b=t6,out=t8);
Or(a=t7,b=t8,out=t9);
And(a=t9,b=instruction[15],out=PCload);
Not(in=PCload,out=incr);
PC(in=Aregout,load=PCload,inc=incr,reset=reset,out[0..14]=pc);

}